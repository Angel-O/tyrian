import sbt._
import scala.sys.process._

object TagGen {

  val tagList: List[TagType] =
    List(
      HasChildren("button"),
      HasChildren("canvas"),
      HasChildren("div"),
      HasChildren("span"),
      HasChildren("h1"),
      HasChildren("h2"),
      HasChildren("h3"),
      HasChildren("h4"),
      HasChildren("h5"),
      HasChildren("h6"),
      HasChildren("label"),
      HasChildren("ol"),
      HasChildren("ul"),
      HasChildren("li"),
      NoChildren("img"),
      NoChildren("input"),
      HasChildren("a"),
      HasChildren("title"),
      HasChildren("style"),
      HasChildren("cite"),
      HasChildren("head"),
      HasChildren("body"),
      NoAttributes("p"),
      NoAttributes("i"),
      NoAttributes("b"),
      NoAttributes("em")
    )

  def genTagTag: String =
    s"""  def tag[M](name: String)(attributes: Attr[M]*)(children: Elem[M]*): Html[M] =
    |    Tag(name, attributes.toList, children.toList)
    |  @targetName("tag-list-repeated")
    |  def tag[M](name: String)(attributes: List[Attr[M]])(children: Elem[M]*): Html[M] =
    |    Tag(name, attributes, children.toList)
    |  @targetName("tag-repeated-list")
    |  def tag[M](name: String)(attributes: Attr[M]*)(children: List[Elem[M]]): Html[M] =
    |    Tag(name, attributes.toList, children)
    |  @targetName("tag-list-list")
    |  def tag[M](name: String)(attributes: List[Attr[M]])(children: List[Elem[M]]): Html[M] =
    |    Tag(name, attributes, children)
    |
    |""".stripMargin

  def genTag(tag: TagType): String =
    tag match {
      case HasChildren(name) => genTagHasChildren(name)
      case NoChildren(name)  => genTagNoChildren(name)
      case NoAttributes(name)  => genTagNoAttributes(name)
    }

  def genTagHasChildren(tagName: String): String =
    s"""  def $tagName[M](attributes: Attr[M]*)(children: Elem[M]*): Html[M] =
    |    Tag("$tagName", attributes.toList, children.toList)
    |  @targetName("$tagName-list-repeated")
    |  def $tagName[M](attributes: List[Attr[M]])(children: Elem[M]*): Html[M] =
    |    Tag("$tagName", attributes, children.toList)
    |  @targetName("$tagName-repeated-list")
    |  def $tagName[M](attributes: Attr[M]*)(children: List[Elem[M]]): Html[M] =
    |    Tag("$tagName", attributes.toList, children)
    |  @targetName("$tagName-list-list")
    |  def $tagName[M](attributes: List[Attr[M]])(children: List[Elem[M]]): Html[M] =
    |    Tag("$tagName", attributes, children)
    |
    |""".stripMargin

  def genTagNoChildren(tagName: String): String =
    s"""  def $tagName[M](attributes: Attr[M]*): Html[M] =
    |    Tag("$tagName", attributes.toList, Nil)
    |  @targetName("$tagName-list")
    |  def $tagName[M](attributes: List[Attr[M]]): Html[M] =
    |    Tag("$tagName", attributes, Nil)
    |
    |""".stripMargin

  def genTagNoAttributes(tagName: String): String =
    s"""  def $tagName[M](children: Elem[M]*): Html[M] =
    |    Tag("$tagName", Nil, children.toList)
    |  @targetName("$tagName-list")
    |  def $tagName[M](children: List[Elem[M]]): Html[M] =
    |    Tag("$tagName", Nil, children)
    |
    |""".stripMargin

  def template(moduleName: String, fullyQualifiedPath: String, contents: String): String =
    s"""package $fullyQualifiedPath
    |
    |import scala.annotation.targetName
    |
    |// GENERATED by TagGen.scala - DO NOT EDIT
    |trait $moduleName {
    |
    |$contents
    |
    |}
    """.stripMargin

  def gen(moduleName: String, fullyQualifiedPath: String, sourceManagedDir: File): Seq[File] = {
    println("Generating Html Tags")

    val contents: String =
      genTagTag + tagList.map(genTag).mkString

    val file: File =
      sourceManagedDir / (moduleName + ".scala")

    val newContents: String =
      template(moduleName, fullyQualifiedPath, contents)

    IO.write(file, newContents)

    println("Written: " + file.getCanonicalPath)

    Seq(file)
  }

}

sealed trait TagType
final case class HasChildren(name: String) extends TagType
final case class NoChildren(name: String)  extends TagType
final case class NoAttributes(name: String)  extends TagType
